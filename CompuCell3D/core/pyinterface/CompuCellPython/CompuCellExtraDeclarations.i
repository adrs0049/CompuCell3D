// ************************************************************
// SWIG Declarations
// ************************************************************

// Where possible, classes are presneted to SWIG via %include.
// SWIG simply uses the definition in the include file and builds
// wrappers based on it.

// In a few cases (e.g. Field3D), SWIG became confused and could not
// properly handle the header file.  These classes and support definitions
// are explicitly handled here.

// Additionally, the definitions for some of the third party classes
// are explicit here.  This may change in the future.

// ******************************
// SWIG Libraries
// ******************************
// C++ std::string handling
%include "std_string.i"

// C++ std::map handling
%include "std_map.i"

// C++ std::set handling
%include "std_set.i"

// C++ std::vector handling
%include "std_vector.i"

// C++ std::shared_ptr handling
%include <std_shared_ptr.i>

%include "Potts3D/Cell.h"
%include "Field3D/Point3D.h"
%include "Field3D/Dim3D.h"
%include <NeighborFinderParams.h>
%include <CompuCell3D/Field3D/Array3D.h>

using namespace CompuCell3D;

//%include "Field3D/Field3DChangeWatcher.h"
//%template(cellchangewatcher) CompuCell3D::Field3DChangeWatcher<CompuCell3D::Cell *>;
//%include "Potts3D/CellChangeWatcher.h"
//%include <CompuCell3D/Automaton/Automaton.h>
//%include <CompuCell3D/Potts3D/Potts3D.h>
//%include "Steppable.h"
//%include "ClassRegistry.h"
//%include "Simulator.h"

%shared_ptr ( CompuCell3D::EnergyFunctionPyWrapper )
%shared_ptr ( CompuCell3D::ChangeWatcherPyWrapper )
%shared_ptr ( CompuCell3D::TypeChangeWatcherPyWrapper )
%shared_ptr ( CompuCell3D::StepperPyWrapper )
%shared_ptr ( CompuCell3D::PyCompuCellObjAdapter )
%shared_ptr ( CompuCell3D::DiffusableVector<float> )
%shared_ptr ( CompuCell3D::PyAttributeAdder )

%include <PyCompuCellObjAdapter.h>
%include <EnergyFunctionPyWrapper.h>
%include <ChangeWatcherPyWrapper.h>
%include <TypeChangeWatcherPyWrapper.h>
%include <StepperPyWrapper.h>
%include <CompuCell3D/steppables/PDESolvers/DiffusableVector.h>
%template (DiffusableVectorFloat) CompuCell3D::DiffusableVector<float>;

// %nothread PyAttributeAdder;
%include <PyAttributeAdder.h>

%include "ParseData.h"
%include "ParserStorage.h"
%template (VectorParseDataPtr) std::vector<ParseData*> ;

//have to include all  export definitions for modules which are arapped to avoid problems with interpreting by swig win32 specific c++ extensions...
#define COMPUCELLLIB_EXPORT
#define BOUNDARYSHARED_EXPORT
#define CHEMOTAXISSIMPLE_EXPORT
#define CHEMOTAXIS_EXPORT
#define MITOSIS_EXPORT
#define MITOSISSTEPPABLE_EXPORT
#define NEIGHBORTRACKER_EXPORT
#define PIXELTRACKER_EXPORT
#define BOUNDARYPIXELTRACKER_EXPORT
#define CONTACTLOCALFLEX_EXPORT
#define CONTACTLOCALPRODUCT_EXPORT
#define CONTACTMULTICAD_EXPORT
#define CELLORIENTATION_EXPORT
#define POLARIZATIONVECTOR_EXPORT
#define ELASTICITYTRACKER_EXPORT
#define ELASTICITY_EXPORT
#define PLASTICITYTRACKER_EXPORT
#define PLASTICITY_EXPORT
#define CONNECTIVITYLOCALFLEX_EXPORT
#define CONNECTIVITYGLOBAL_EXPORT
// #define LENGTHCONSTRAINTLOCALFLEX_EXPORT
#define LENGTHCONSTRAINT_EXPORT
#define MOLECULARCONTACT_EXPORT 
#define FOCALPOINTPLASTICITY_EXPORT
#define MOMENTOFINERTIA_EXPORT 
#define ADHESIONFLEX_EXPORT
#define CENTEROFMASS_EXPORT
//AutogeneratedModules1 - DO NOT REMOVE THIS LINE IT IS USED BY TWEDIT TO LOCATE CODE INSERTION POINT
//CleaverMeshDumper_autogenerated1
#define CLEAVERMESHDUMPER_EXPORT
// // // //CGALMeshDumper_autogenerated1
// // // #define CGALMESHDUMPER_EXPORT
//ContactOrientation_autogenerated1
#define CONTACTORIENTATION_EXPORT
//BoundaryMonitor_autogenerated1
#define BOUNDARYMONITOR_EXPORT
//CellTypeMonitor_autogenerated1
#define CELLTYPEMONITOR_EXPORT
//Polarization23_autogenerated1
#define POLARIZATION23_EXPORT
//ClusterSurface_autogenerated1
#define CLUSTERSURFACE_EXPORT
//ClusterSurfaceTracker_autogenerated1
#define CLUSTERSURFACETRACKER_EXPORT

%inline %{
	typedef std::shared_ptr<CompuCell3D::Plugin> PluginSharedPtr;
	
	PluginSharedPtr getPlugin(std::string _pluginName) 
	{
		return std::static_pointer_cast<Plugin>(Simulator::pluginManager.get(_pluginName));
	}
   
	typedef std::shared_ptr<CompuCell3D::Steppable> SteppableSharedPtr;
   
	SteppableSharedPtr getSteppable(std::string _steppableName) 
	{
		return std::static_pointer_cast<Steppable>(Simulator::steppableManager.get(_steppableName));
	}
%}

%define PLUGINACCESSOR(pluginName)
	
	%shared_ptr(CompuCell3D::pluginName ## Plugin)
	%include <CompuCell3D/plugins/ ## pluginName/pluginName ## Plugin.h>
	
%inline %{
using namespace CompuCell3D;
#include <memory>
#include <CompuCell3D/plugins/ ## pluginName/pluginName ## Plugin.h>

typedef std::shared_ptr< CompuCell3D::pluginName ## Plugin > (pluginName ## PluginSharedPtr);

std::shared_ptr< CompuCell3D::pluginName ## Plugin > get ## pluginName ## Plugin()
{
	return std::static_pointer_cast<pluginName ## Plugin>(Simulator::pluginManager.get(#pluginName));
}
%}
%enddef

%inline %{
   PyObject * getPyAttrib(CompuCell3D::CellG * _cell){
      Py_INCREF(_cell->pyAttrib);
      return _cell->pyAttrib;
   }

   bool isPyAttribValid(CompuCell3D::CellG * _cell){
      return (bool) _cell->pyAttrib;
   }   
%}

%include "CompuCellPluginsInclude.i"

// shared ptrs for plugin data stored in accesssors
%shared_ptr(CompuCell3D::ConnectivityLocalFlexData)
%shared_ptr(CompuCell3D::ConnectivityGlobalData)
%shared_ptr(CompuCell3D::LengthConstraintData)
%shared_ptr(CompuCell3D::NeighborTracker)
%shared_ptr(CompuCell3D::PixelTracker)
%shared_ptr(CompuCell3D::BoundaryPixelTracker)
%shared_ptr(CompuCell3D::ContactLocalFlexDataContainer)
%shared_ptr(CompuCell3D::ContactLocalProductData)
%shared_ptr(CompuCell3D::ContactMultiCadData)
%shared_ptr(CompuCell3D::AdhesionFlexData)
%shared_ptr(CompuCell3D::ElasticityTracker)
%shared_ptr(CompuCell3D::PlasticityTracker)
%shared_ptr(CompuCell3D::CellOrientationVector)
%shared_ptr(CompuCell3D::LambdaCellOrientation)
%shared_ptr(CompuCell3D::PolarizationVector)
%shared_ptr(CompuCell3D::FocalPointPlasticityTracker)
//%shared_ptr(CompuCell3D::PersistentMotionData)
%shared_ptr(CompuCell3D::ContactOrientationData)
%shared_ptr(CompuCell3D::Polarization23Data)

//ConnectivityLocalFlex
%shared_ptr (BasicClassAccessor<CompuCell3D::ConnectivityLocalFlexData>) //necessary to get ConnectivityLocalFlexData accessor working
%include <CompuCell3D/plugins/ConnectivityLocalFlex/ConnectivityLocalFlexData.h>
PLUGINACCESSOR(ConnectivityLocalFlex)

//ConnectivityGlobal
%shared_ptr (BasicClassAccessor<CompuCell3D::ConnectivityGlobalData>) //necessary to get ConnectivityGlobalData accessor working
%include <CompuCell3D/plugins/ConnectivityGlobal/ConnectivityGlobalData.h>
PLUGINACCESSOR(ConnectivityGlobal)


//Chemotaxis Plugin
%include <CompuCell3D/plugins/ChemotaxisSimple/ChemotaxisSimpleEnergy.h>
%include <CompuCell3D/plugins/Chemotaxis/ChemotaxisData.h>
PLUGINACCESSOR(Chemotaxis)

//plugins
%shared_ptr(CompuCell3D::MitosisPlugin)
%shared_ptr(CompuCell3D::MitosisSimplePlugin)
%inline %{ 
#include <CompuCell3D/plugins/Mitosis/MitosisPlugin.h>
#include <CompuCell3D/plugins/Mitosis/MitosisSimplePlugin.h>
%}
%include <CompuCell3D/plugins/Mitosis/MitosisPlugin.h>
%include <CompuCell3D/plugins/Mitosis/MitosisSimplePlugin.h>

//Volume Tracker Plugin
PLUGINACCESSOR(VolumeTracker)

//CenterOfMass Plugin
PLUGINACCESSOR(CenterOfMass)

//NeighborPlugin
//%template (nsdSetPyItr) STLPyIteratorRefRetType<std::set<CompuCell3D::NeighborSurfaceData> , CompuCell3D::NeighborSurfaceData>;
%shared_ptr (BasicClassAccessor<CompuCell3D::NeighborTracker>) //necessary to get NeighborTracker accessor working
%template (nsdSetPyItr) STLPyIteratorRefRetType<std::set<CompuCell3D::NeighborSurfaceData> , CompuCell3D::NeighborSurfaceData>;
// %template (nsdSetPyItr) STLPyIterator<std::set<CompuCell3D::NeighborSurfaceData> >;
%template (neighborsurfacedataset) std::set<CompuCell3D::NeighborSurfaceData>; //necessary to get basis set functionality working
PLUGINACCESSOR(NeighborTracker)

%shared_ptr (BasicClassAccessor<CompuCell3D::PixelTracker>) //necessary to get PixelTracker accessor working
%include <CompuCell3D/plugins/PixelTracker/PixelTracker.h>
// #define std::set<CompuCell3D::PixelTrackerData>::value_type CompuCell3D::PixelTrackerData
%template (PixelTrackerDataset) std::set<CompuCell3D::PixelTrackerData>; //necessary to get basis set functionality working
%template (pixelSetPyItr) STLPyIteratorRefRetType< std::set<CompuCell3D::PixelTrackerData>,CompuCell3D::PixelTrackerData >; 
// %template (pixelSetPyItr) STLPyIterator<std::set<CompuCell3D::PixelTrackerData> >;
PLUGINACCESSOR(PixelTracker)

%shared_ptr (BasicClassAccessor<CompuCell3D::BoundaryPixelTracker>)
%include <CompuCell3D/plugins/BoundaryPixelTracker/BoundaryPixelTracker.h>
%template (BoundaryPixelTrackerDataset) std::set<CompuCell3D::BoundaryPixelTrackerData>; //necessary to get basis set functionality working
%template (boundaryPixelSetPyItr) STLPyIteratorRefRetType<std::set<CompuCell3D::BoundaryPixelTrackerData> , CompuCell3D::BoundaryPixelTrackerData >;
// %template (boundaryPixelSetPyItr) STLPyIterator<std::set<CompuCell3D::BoundaryPixelTrackerData> >;
PLUGINACCESSOR(BoundaryPixelTracker)

//ContactLocalFlexPlugin
%shared_ptr (BasicClassAccessor<CompuCell3D::ContactLocalFlexDataContainer>) //necessary to get ContactlocalFlexData accessor working
%include <CompuCell3D/plugins/ContactLocalFlex/ContactLocalFlexData.h>
%template (clfdSetPyItr) STLPyIteratorRefRetType<std::set<CompuCell3D::ContactLocalFlexData> , CompuCell3D::ContactLocalFlexData >;
// %template (clfdSetPyItr) STLPyIterator<std::set<CompuCell3D::ContactLocalFlexData> >;
%template (contactlocalflexdataset) std::set<CompuCell3D::ContactLocalFlexData>; //necessary to get basis set functionality working
PLUGINACCESSOR(ContactLocalFlex)

//ContactLocalProductPlugin
%shared_ptr (BasicClassAccessor<CompuCell3D::ContactLocalProductData>) //necessary to get ContactLocalProductData accessor working
%include <CompuCell3D/plugins/ContactLocalProduct/ContactLocalProductData.h>
%template (jVecPyItr) STLPyIteratorRefRetType<ContactLocalProductData::ContainerType_t,float>; //ContainerType_t - this is vector<float> in current implementation
// %template (jVecPyItr) STLPyIterator<ContactLocalProductData::ContainerType_t>; //ContainerType_t - this is vector<float> in current implementation
%template (contactproductdatacontainertype) std::vector<float>; //necessary to get basis vector functionality working
PLUGINACCESSOR(ContactLocalProduct)

//some functions to get more vector function to work
%extend std::vector<float>{

   void set(unsigned int pos, float _x){
      if(pos <= self->size()-1 ){
         self->operator[](pos)=_x;
      }
   }

   float get(unsigned int pos){
      if(pos <= self->size()-1 ){
         return self->operator[](pos);
      }
   }
}

//ContactMultiCadPlugin
%shared_ptr (BasicClassAccessor<CompuCell3D::ContactMultiCadData>) //necessary to get ContactMultiCadData accessor working
%include <CompuCell3D/plugins/ContactMultiCad/ContactMultiCadData.h>
PLUGINACCESSOR(ContactMultiCad)

//AdhesionFlexPlugin
%shared_ptr (BasicClassAccessor<CompuCell3D::AdhesionFlexData>) //necessary to get AdhesionFlexData accessor working
%include <CompuCell3D/plugins/AdhesionFlex/AdhesionFlexData.h>
PLUGINACCESSOR(AdhesionFlex)

//CellOrientation Plugin
%shared_ptr (BasicClassAccessor<CompuCell3D::CellOrientationVector>) //necessary to get CellOrientationVector accessor working
%shared_ptr (BasicClassAccessor<CompuCell3D::LambdaCellOrientation>) //necessary to get LambdaCellOrientation accessor working
%include <CompuCell3D/plugins/CellOrientation/CellOrientationVector.h>
PLUGINACCESSOR(CellOrientation)

//PolarizationVectorPlugin
%shared_ptr (BasicClassAccessor<CompuCell3D::PolarizationVector>) //necessary to get CellOrientationVector accessor working
%include <CompuCell3D/plugins/PolarizationVector/PolarizationVector.h>
PLUGINACCESSOR(PolarizationVector)

//Elasticity Plugin
%shared_ptr (BasicClassAccessor<CompuCell3D::ElasticityTracker>) //necessary to get ElasticityTracker accessor working
%include <CompuCell3D/plugins/ElasticityTracker/ElasticityTracker.h>
%template (elasticitySetPyItr) STLPyIteratorRefRetType<std::set<CompuCell3D::ElasticityTrackerData> , CompuCell3D::ElasticityTrackerData >;
// %template (elasticitySetPyItr) STLPyIterator<std::set<CompuCell3D::ElasticityTrackerData> >;
%template (elasticityTrackerDataSet) std::set<CompuCell3D::ElasticityTrackerData>; //necessary to get basic set functionality working
PLUGINACCESSOR(ElasticityTracker)

//Plasticity Plugin
%shared_ptr (BasicClassAccessor<CompuCell3D::PlasticityTracker>) //necessary to get PlasticityTracker accessor working
%include <CompuCell3D/plugins/PlasticityTracker/PlasticityTracker.h>
%template (plasticitySetPyItr) STLPyIteratorRefRetType<std::set<CompuCell3D::PlasticityTrackerData> , CompuCell3D::PlasticityTrackerData >;
// %template (plasticitySetPyItr) STLPyIterator<std::set<CompuCell3D::PlasticityTrackerData> >;
%template (plasticityTrackerDataSet) std::set<CompuCell3D::PlasticityTrackerData>; //necessary to get basic set functionality working
PLUGINACCESSOR(PlasticityTracker)

//Focal Point Plasticity Plugin
%shared_ptr (BasicClassAccessor<CompuCell3D::FocalPointPlasticityTracker>) //necessary to get PlasticityTracker accessor working
%include <CompuCell3D/plugins/FocalPointPlasticity/FocalPointPlasticityTracker.h>
%template (focalPointPlasticitySetPyItr) STLPyIteratorRefRetType<std::set<CompuCell3D::FocalPointPlasticityTrackerData> , CompuCell3D::FocalPointPlasticityTrackerData >;
// %template (focalPointPlasticitySetPyItr) STLPyIterator<std::set<CompuCell3D::FocalPointPlasticityTrackerData> >;
%template (focalPointPlasticityTrackerDataSet) std::set<CompuCell3D::FocalPointPlasticityTrackerData>; //necessary to get basic set functionality working
%template (focalPointPlasticityTrackerDataVector) std::vector<CompuCell3D::FocalPointPlasticityTrackerData>; //necessary to get basic set functionality working
PLUGINACCESSOR(FocalPointPlasticity)

//MomentOfInertia
PLUGINACCESSOR(MomentOfInertia)

//Secretion
%include <CompuCell3D/plugins/Secretion/FieldSecretor.h>
PLUGINACCESSOR(Secretion)

%extend  CompuCell3D::FieldSecretor{
  bool secreteInsideCell(CellG * _cell, float _amount){
    if (!self->pixelTrackerPlugin){
        throw std::runtime_error(std::string("PixelTracker Plugin has been turned off. Cannot execute secreteInsideCell function"));        
    }else{
        return self->_secreteInsideCell(_cell,_amount);
    }               
  }    
  
  
  bool secreteInsideCellAtBoundary(CellG * _cell, float _amount){
    if (!self->boundaryPixelTrackerPlugin){
        throw std::runtime_error(std::string("BoundaryPixelTracker Plugin has been turned off. Cannot execute secreteInsideCellAtBoundary function"));        
    }else{
        return self->_secreteInsideCellAtBoundary(_cell,_amount);
    }               
  }    
  
  bool secreteInsideCellAtBoundaryOnContactWith(CellG * _cell, float _amount,const std::vector<unsigned char> & _onContactVec){
      
    if (!self->boundaryPixelTrackerPlugin){
        throw std::runtime_error(std::string("BoundaryPixelTracker Plugin has been turned off. Cannot execute secreteInsideCellAtBoundaryOnContactWith function"));        
    }else{
        return self->_secreteInsideCellAtBoundaryOnContactWith(_cell,_amount,_onContactVec);
    }                     
  }

  bool secreteOutsideCellAtBoundary(CellG * _cell, float _amount){
      
    if (!self->boundaryPixelTrackerPlugin){
        throw std::runtime_error(std::string("BoundaryPixelTracker Plugin has been turned off. Cannot execute secreteOutsideCellAtBoundary function"));        
    }else{
        return self->_secreteOutsideCellAtBoundary(_cell,_amount);
    }                     
  }

  bool secreteOutsideCellAtBoundaryOnContactWith(CellG * _cell, float _amount,const std::vector<unsigned char> & _onContactVec){
      
    if (!self->boundaryPixelTrackerPlugin){
        throw std::runtime_error(std::string("BoundaryPixelTracker Plugin has been turned off. Cannot execute secreteOutsideCellAtBoundaryOnContactWith function"));        
    }else{
        return self->_secreteOutsideCellAtBoundaryOnContactWith(_cell,_amount,_onContactVec);
    }                     
  }  
  
//   bool secreteInsideCellAtCOM(CellG * _cell, float _amount){
//     return self->_secreteInsideCellAtCOM(_cell,_amount);  
//   }
  
  bool uptakeInsideCell(CellG * _cell, float _maxUptake, float _relativeUptake){
    if (!self->pixelTrackerPlugin){
        throw std::runtime_error(std::string("PixelTracker Plugin has been turned off. Cannot execute uptakeInsideCell function"));        
    }else{
        return self->_uptakeInsideCell(_cell, _maxUptake, _relativeUptake);
    }               
  }    

  bool uptakeInsideCellAtBoundary(CellG * _cell, float _maxUptake, float _relativeUptake){
    if (!self->pixelTrackerPlugin){
        throw std::runtime_error(std::string("BoundaryPixelTracker Plugin has been turned off. Cannot execute uptakeInsideCellAtBoundary function"));        
    }else{
        return self->_uptakeInsideCellAtBoundary(_cell,_maxUptake, _relativeUptake);
    }               
  }    

  bool uptakeInsideCellAtBoundaryOnContactWith(CellG * _cell, float _maxUptake, float _relativeUptake, const std::vector<unsigned char> & _onContactVec){
    if (!self->pixelTrackerPlugin){
        throw std::runtime_error(std::string("BoundaryPixelTracker Plugin has been turned off. Cannot execute uptakeInsideCellAtBoundaryOnContactWith function"));        
    }else{
        return self->_uptakeInsideCellAtBoundaryOnContactWith(_cell,_maxUptake, _relativeUptake,_onContactVec);
    }               
  }          
  
  bool uptakeOutsideCellAtBoundary(CellG * _cell, float _maxUptake, float _relativeUptake){
    if (!self->pixelTrackerPlugin){
        throw std::runtime_error(std::string("BoundaryPixelTracker Plugin has been turned off. Cannot execute uptakeOutsideCellAtBoundary function"));        
    }else{
        return self->_uptakeOutsideCellAtBoundary(_cell,_maxUptake, _relativeUptake);
    }               
  }    

  bool uptakeOutsideCellAtBoundaryOnContactWith(CellG * _cell, float _maxUptake, float _relativeUptake, const std::vector<unsigned char> & _onContactVec){
    if (!self->pixelTrackerPlugin){
        throw std::runtime_error(std::string("BoundaryPixelTracker Plugin has been turned off. Cannot execute uptakeOutsideCellAtBoundaryOnContactWith function"));        
    }else{
        return self->_uptakeOutsideCellAtBoundaryOnContactWith(_cell,_maxUptake, _relativeUptake,_onContactVec);
    }               
  }   

//   bool uptakeInsideCellAtCOM(CellG * _cell, float _maxUptake, float _relativeUptake){
//     return _uptakeInsideCellAtCOM(_cell,_maxUptake,_relativeUptake);
//   }
  
}
 
//Steppables
%inline %{ #include <CompuCell3D/steppables/Mitosis/MitosisSteppable.h> %}
%shared_ptr (CompuCell3D::MitosisSteppable)
%include <CompuCell3D/steppables/Mitosis/MitosisSteppable.h>

//AutogeneratedModules2 - DO NOT REMOVE THIS LINE IT IS USED BY TWEDIT TO LOCATE CODE INSERTION POINT
//CleaverMeshDumper_autogenerated2

%shared_ptr(CompuCell3D::CleaverMeshDumper)
%include <CompuCell3D/steppables/CleaverMeshDumper/CleaverMeshDumper.h>

%inline %{
#include <CompuCell3D/steppables/CleaverMeshDumper/CleaverMeshDumper.h>
typedef std::shared_ptr<CleaverMeshDumper> CleaverMeshDumperPtr;

CleaverMeshDumperPtr getCleaverMeshDumper() 
{
	return  std::static_pointer_cast<CleaverMeshDumper>(Simulator::steppableManager.get("CleaverMeshDumper"));
}
%}

//ContactOrientation_autogenerated2
%shared_ptr (BasicClassAccessor<CompuCell3D::ContactOrientationData>) //necessary to get ContactOrientationData accessor working in Python
%include <CompuCell3D/plugins/ContactOrientation/ContactOrientationData.h>
PLUGINACCESSOR(ContactOrientation)

//BoundaryMonitor_autogenerated2
PLUGINACCESSOR(BoundaryMonitor)

//CellTypeMonitor_autogenerated2
PLUGINACCESSOR(CellTypeMonitor)

//Polarization23_autogenerated2
%shared_ptr (BasicClassAccessor<CompuCell3D::Polarization23Data>) //necessary to get Polarization23Data accessor working in Python
%include <CompuCell3D/plugins/Polarization23/Polarization23Data.h>
PLUGINACCESSOR(Polarization23)

//ClusterSurface_autogenerated2
PLUGINACCESSOR(ClusterSurface)

//ClusterSurfaceTracker_autogenerated2
PLUGINACCESSOR(ClusterSurfaceTracker)

// plugins included manually without macro

//LengthConstraint - includes local flax option
%shared_ptr (CompuCell3D::LengthConstraintPlugin)
%shared_ptr (CompuCell3D::LengthConstraintLocalFlexPlugin)
%shared_ptr (BasicClassAccessor<CompuCell3D::LengthConstraintData>) //necessary to get LengthConstraintData accessor working
%include <CompuCell3D/plugins/LengthConstraint/LengthConstraintData.h>
%include <CompuCell3D/plugins/LengthConstraint/LengthConstraintPlugin.h>

%inline %{
	#include <CompuCell3D/plugins/LengthConstraint/LengthConstraintPlugin.h>
	typedef std::shared_ptr<CompuCell3D::LengthConstraintPlugin> LengthConstraintPluginPtr;

    LengthConstraintPluginPtr getLengthConstraintPlugin(){
         return std::static_pointer_cast<LengthConstraintPlugin>(Simulator::pluginManager.get("LengthConstraint"));
    }
    LengthConstraintPluginPtr getLengthConstraintLocalFlexPlugin(){
        auto ptr= Simulator::pluginManager.get("LengthConstraintLocalFlex");
        if (ptr){
            return std::static_pointer_cast<LengthConstraintPlugin>(ptr);
        }
        return std::static_pointer_cast<LengthConstraintPlugin>(Simulator::pluginManager.get("LengthConstraintLocalFlex"));
    }
%}


//note that template Array3DCUDA has to use static_cast<T>(0) instead of T() to enable SWIG to properly generate wrappers for T=ubnsigned char using gcc compiler
%template (Array3DCUDAunsignedchar) Array3DCUDA<unsigned char>; //necessary Array3DCUDA<unsigned char> working in Python




%shared_ptr(BasicClassGroup)
%shared_ptr(BasicClassAccessorBase)
%include <BasicUtils/BasicClassAccessorBase.h>
%include <BasicUtils/BasicClassAccessor.h>
%include <BasicUtils/BasicClassGroup.h> //had to include it to avoid problems with template instantiation

// templates for the BasicClassAccessors need to be after including the above I think :P
%template (ConnectivityLocalFlexAccessor) BasicClassAccessor<CompuCell3D::ConnectivityLocalFlexData>; //necessary to get ConnectivityLocalFlexData accessor working
%template (connectivityGlobalaccessor) BasicClassAccessor<CompuCell3D::ConnectivityGlobalData>; //necessary to get ConnectivityGlobalData accessor working
%template (lengthconstraintccessor) BasicClassAccessor<CompuCell3D::LengthConstraintData>; //necessary to get LengthConstraintData accessor working
%template (neighbortrackeraccessor) BasicClassAccessor<CompuCell3D::NeighborTracker>; //necessary to get NeighborTracker accessor working
%template (PixelTrackerAccessor) BasicClassAccessor<CompuCell3D::PixelTracker>; //necessary to get PixelTracker accessor working
%template (BoundaryPixelTrackerAccessor) BasicClassAccessor<CompuCell3D::BoundaryPixelTracker>; //necessary to get BoundaryPixelTracker accessor working
%template (contactlocalflexcontainerccessor) BasicClassAccessor<CompuCell3D::ContactLocalFlexDataContainer>; //necessary to get ContactlocalFlexData accessor working
%template (contactlocalproductdata) BasicClassAccessor<CompuCell3D::ContactLocalProductData>;
%template (contactmulticaddataaccessor) BasicClassAccessor<CompuCell3D::ContactMultiCadData>; //necessary to get ContactMultiCadData accessor working
%template (adhesionflexdataaccessor) BasicClassAccessor<CompuCell3D::AdhesionFlexData>; //necessary to get AdhesionFlexData accessor working
%template (contactproductflexccessor) BasicClassAccessor<CompuCell3D::ContactLocalProductData>; //necessary to get ContactLocalProductData accessor working
%template (elasticityTrackerAccessor) BasicClassAccessor<CompuCell3D::ElasticityTracker>; //necessary to get ElasticityTracker accessor working
%template (plasticityTrackerAccessor) BasicClassAccessor<CompuCell3D::PlasticityTracker>; //necessary to get PlasticityTracker accessor working
%template (cellOrientationVectorAccessor) BasicClassAccessor<CompuCell3D::CellOrientationVector>; //necessary to get CellOrientationVector accessor working
%template (LambdaCellOrientationAccessor) BasicClassAccessor<CompuCell3D::LambdaCellOrientation>; //necessary to get LambdaCellOrientation accessor working
%template (polarizationVectorAccessor) BasicClassAccessor<CompuCell3D::PolarizationVector>; //necessary to get CellOrientationVector accessor working
%template (focalPointPlasticityTrackerAccessor) BasicClassAccessor<CompuCell3D::FocalPointPlasticityTracker>; //necessary to get PlasticityTracker accessor working
//%template (PersistentMotionDataAccessor) BasicClassAccessor<CompuCell3D::PersistentMotionData>; //necessary to get CellOrientationVector accessor working
%template (ContactOrientationDataAccessorTemplate) BasicClassAccessor<CompuCell3D::ContactOrientationData>; //necessary to get ContactOrientationData accessor working in Python
%template (Polarization23DataAccessorTemplate) BasicClassAccessor<CompuCell3D::Polarization23Data>; //necessary to get Polarization23Data accessor working in Python

%{
#include <BasicUtils/BasicClassAccessorBase.h>
#include <BasicUtils/BasicClassAccessor.h>
#include <BasicUtils/BasicClassGroup.h>
%}